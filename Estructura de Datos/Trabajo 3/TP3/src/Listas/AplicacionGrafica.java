package Listas;

import javax.swing.JOptionPane;

public class AplicacionGrafica extends javax.swing.JFrame {
    IndexList<Integer> lista;
    
    public AplicacionGrafica() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel1 = new javax.swing.JPanel();
        crearLista = new javax.swing.JButton();
        añadirAlFinal = new javax.swing.JButton();
        añadirEnPosicion = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        remover = new javax.swing.JButton();
        buscarPorPosicion = new javax.swing.JButton();
        buscarElemento = new javax.swing.JButton();
        eliminarLista = new javax.swing.JButton();
        Titulo = new javax.swing.JLabel();
        descripcion1 = new javax.swing.JLabel();
        descripcion2 = new javax.swing.JLabel();
        descripcion3 = new javax.swing.JLabel();
        descripcion4 = new javax.swing.JLabel();
        descripcion5 = new javax.swing.JLabel();
        descripcion6 = new javax.swing.JLabel();
        descripcion7 = new javax.swing.JLabel();
        descripcion8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        crearLista.setText("Crear lista indexada");
        crearLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearListaActionPerformed(evt);
            }
        });

        añadirAlFinal.setText("Añadir elemento");
        añadirAlFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirAlFinalActionPerformed(evt);
            }
        });

        añadirEnPosicion.setText("Añadir elemento");
        añadirEnPosicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirEnPosicionActionPerformed(evt);
            }
        });

        modificar.setText("Modificar elemento");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        remover.setText("Remover elemento");
        remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerActionPerformed(evt);
            }
        });

        buscarPorPosicion.setText("Buscar elemento");
        buscarPorPosicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorPosicionActionPerformed(evt);
            }
        });

        buscarElemento.setText("Buscar posicion");
        buscarElemento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarElementoActionPerformed(evt);
            }
        });

        eliminarLista.setText("Eliminar lista");
        eliminarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarListaActionPerformed(evt);
            }
        });

        Titulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Titulo.setText("Menu de operaciones");

        descripcion1.setText("Inicializa una lista vacia");

        descripcion2.setText("Añade un nuevo elemento al final de la lista");

        descripcion3.setText("Añade un nuevo elemento en la posicion especificada (Elemento, Posición)");

        descripcion4.setText("Modifica el elemento de la posicion especificada");

        descripcion5.setText("Remueve el elemento de la posicion especificada");

        descripcion6.setText("Busca en la posicion especificada y devuelve el elemento que le corresponde");

        descripcion7.setText("Busca el elemento especificado y devuelve su posicion");

        descripcion8.setText("Elimina una lista");

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eliminarLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buscarElemento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buscarPorPosicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(añadirAlFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(crearLista, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(modificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(añadirEnPosicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descripcion1)
                            .addComponent(descripcion4)
                            .addComponent(descripcion5)
                            .addComponent(descripcion6)
                            .addComponent(descripcion7)
                            .addComponent(descripcion8)
                            .addComponent(descripcion3)
                            .addComponent(descripcion2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(Titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crearLista)
                    .addComponent(descripcion1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcion2)
                    .addComponent(añadirAlFinal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcion3)
                    .addComponent(añadirEnPosicion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcion4)
                    .addComponent(modificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcion5)
                    .addComponent(remover))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcion6)
                    .addComponent(buscarPorPosicion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscarElemento)
                    .addComponent(descripcion7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eliminarLista)
                    .addComponent(descripcion8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


//Funciona! :)    
    private static boolean validacion(String elemento) {
	try{
            Integer.parseInt(elemento);
            return true;
	}
        catch(NumberFormatException nfe){
            return false;
	}
    }

//Funciona! :)    
    private void eliminarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarListaActionPerformed
        if(lista!=null){
            int frame = JOptionPane.showOptionDialog(null, "Se eliminará la lista actual", "Eliminar lista indexada", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] {"Eliminar","Cancelar"}, null);
            if (frame==0 && lista!=null){
                lista = null;
                //Pasar el recolector de basura
                System.gc();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No existe ninguna lista que eliminar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_eliminarListaActionPerformed

//Funciona! :)
    private void crearListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearListaActionPerformed
        int frame = JOptionPane.showOptionDialog(null, "Se creará una nueva lista vacía. En caso de ya existir una, se sobreescribirá por la nueva", "Crear lista indexada", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] {"Crear","Cancelar"}, null);
        if (frame==0){
            IndexList<Integer> list = new IndexList<Integer>();
            lista = list;
        }
    }//GEN-LAST:event_crearListaActionPerformed
    
//Funciona! :)
    private void añadirAlFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirAlFinalActionPerformed
        if(lista!=null){
            String elemento = JOptionPane.showInputDialog(null, "Ingrese el elemento que desea agregar", "Agregar un elemento al final", JOptionPane.PLAIN_MESSAGE);
            if(elemento==null){
            }
            else{
                while(!validacion(elemento) || elemento.equals("")){
                    elemento = JOptionPane.showInputDialog(null, "Atención: El elemento a ingresar debe ser un número entero", "Agregar un elemento al final", JOptionPane.WARNING_MESSAGE);
                    if(elemento==null){
                        break;
                    }
                }
                if(elemento!=null){   
                    lista.add(Integer.parseInt(elemento));
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No existe ninguna lista creada en la que agregar el elemento", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_añadirAlFinalActionPerformed

//Funciona! :)
    private void añadirEnPosicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirEnPosicionActionPerformed
        if(lista!=null){
            String elemento = JOptionPane.showInputDialog(null, "Ingrese el elemento que desea agregar", "Añadir elemento al final", JOptionPane.PLAIN_MESSAGE);
            if(elemento==null){
            }
            else{
                while (!validacion(elemento) || elemento.equals("")){
                    elemento = JOptionPane.showInputDialog(null, "Atención: El elemento a ingresar debe ser un número entero", "Agregar un elemento en una posición especifica", JOptionPane.WARNING_MESSAGE);
                    if(elemento==null){
                        break;
                    }
                }
                if(elemento!=null){
                    String pos = JOptionPane.showInputDialog(null, "Ingrese la posición donde desea agregar el elemento", "Agregar un elemento en una posición especifica", JOptionPane.PLAIN_MESSAGE);
                    if(pos==null){
                    }
                    else{
                        while (!validacion(pos) || pos.equals("") || Integer.parseInt(pos)<=0){
                            pos = JOptionPane.showInputDialog(null, "Atención: La posición especificada debe ser un número entero positivo mayor a cero", "Agregar un elemento en una posición especifica", JOptionPane.WARNING_MESSAGE);
                            if(pos==null){
                                break;
                            }
                        }
                        if(pos!=null){ 
                            lista.add(Integer.parseInt(pos), Integer.parseInt(elemento));
                        }
                    }  
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No existe ninguna lista creada en la que agregar el elemento", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_añadirEnPosicionActionPerformed

//Funciona! :)
//La duda es basicamente que estoy "repitiendo" codigo porque mensajes como que la lista esta vacia o que
//el inidice es mayor al maximo de la lista, estanprogramados en la clase IndexList, pero aca los estoy volviendo
//a programar de otra forma para que se muestren en ventanas de dialogo, y no sé si eso esta bien o no.
    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        if(lista!=null){
            if(!lista.isEmpty()){
                String pos = JOptionPane.showInputDialog(null, "Ingrese la posición donde desea modificar el elemento", "Modificar elemento en una posición especifica", JOptionPane.PLAIN_MESSAGE);
                if(pos==null){
                }
                else{
                    while (!validacion(pos) || pos.equals("") || Integer.parseInt(pos)<=0){
                        pos = JOptionPane.showInputDialog(null, "Atención: La posición especificada debe ser un número entero positivo mayor a cero", "Modificar elemento en una posición especifica", JOptionPane.WARNING_MESSAGE);
                        if(pos==null){
                            break;
                        }
                    }
                    if(pos==null){                    
                    }
                    else{
                        if(Integer.parseInt(pos)>lista.size()){
                            JOptionPane.showMessageDialog(null, "No se puede modificar la posición especificada porque excede a la maxima de la lista", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else{
                            String elemento = JOptionPane.showInputDialog(null, "Ingrese el nuevo elemento que desea añadir", "Modificar elemento en una posición especifica", JOptionPane.PLAIN_MESSAGE);
                            if(elemento==null){
                            }
                            else{
                                while (!validacion(elemento) || elemento.equals("")){
                                    elemento = JOptionPane.showInputDialog(null, "Atención: El nuevo elemento a ingresar debe ser un número entero", "Modificar elemento en una posición especifica", JOptionPane.WARNING_MESSAGE);
                                    if(elemento==null){
                                    break;
                                    }   
                                }
                                if(elemento!=null){
                                    lista.set(Integer.parseInt(pos), Integer.parseInt(elemento));                       
                                }
                            }
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No se puede modificar nada aún porque la lista está vacía", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No se puede modificar nada aún porque no existe ninguna lista creada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_modificarActionPerformed

//Funciona! :)
    private void removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerActionPerformed
        if(lista!=null){
            if(!lista.isEmpty()){
                String pos = JOptionPane.showInputDialog(null, "Ingrese la posición donde desea eliminar el elemento", "Remover el elemento de una posición especifica", JOptionPane.PLAIN_MESSAGE);
                if(pos==null){
                }
                else{
                    while (!validacion(pos) || pos.equals("") || Integer.parseInt(pos)<=0){
                        pos = JOptionPane.showInputDialog(null, "Atención: La posición especificada debe ser un número entero positivo mayor a cero", "Remover el elemento de una posición especifica", JOptionPane.WARNING_MESSAGE);
                        if(pos==null){
                            break;
                        }
                    }
                    if(pos!=null){
                        if(Integer.parseInt(pos)>lista.size()){
                            JOptionPane.showMessageDialog(null, "No se puede remover el elemento de la posición especificada porque excede a la maxima de la lista", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Se removió de la lista el elemento: "+lista.remove(Integer.parseInt(pos)), "Remover elemento", JOptionPane.PLAIN_MESSAGE);
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No se puede remover ningun elemento aún porque la lista está vacía", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No se puede remover ningun elemento aún porque no existe ninguna lista creada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removerActionPerformed

    private void buscarPorPosicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorPosicionActionPerformed
        if(lista!=null){
            if(!lista.isEmpty()){
                String pos = JOptionPane.showInputDialog(null, "Ingrese la posición cuyo elemento quiere conocer", "Conocer el elemento de una posición especifica", JOptionPane.PLAIN_MESSAGE);
                if(pos==null){
                }
                else{
                    while (!validacion(pos) || pos.equals("") || Integer.parseInt(pos)<=0){
                        pos = JOptionPane.showInputDialog(null, "Atención: La posición especificada debe ser un número entero positivo mayor a cero", "Conocer el elemento de una posición especifica", JOptionPane.WARNING_MESSAGE);
                        if(pos==null){
                            break;
                        }
                    }
                    if(pos!=null){
                        if(Integer.parseInt(pos)>lista.size()){
                            JOptionPane.showMessageDialog(null, "No se puede recuperar el elemento de la posición especificada porque excede a la maxima de la lista", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "El elemento que se encuentra en la posición "+Integer.parseInt(pos)+" es: "+lista.get(Integer.parseInt(pos)), "Conocer el elemento de una posición especifica", JOptionPane.PLAIN_MESSAGE);
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No se puede buscar ningun elemento aún porque la lista está vacía", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No se puede buscar ningun elemento aún porque no existe ninguna lista creada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buscarPorPosicionActionPerformed

//no funciona la condicion de si está o no :(
    private void buscarElementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarElementoActionPerformed
        if(lista!=null){
            if(!lista.isEmpty()){
                String elemento = JOptionPane.showInputDialog(null, "Ingrese el elemento cuya posición quiere conocer", "Conocer la posición de un elemento especifico", JOptionPane.PLAIN_MESSAGE);
                if(elemento==null){
                }
                else{
                    while (!validacion(elemento) || elemento.equals("")){
                        elemento = JOptionPane.showInputDialog(null, "Atención: Debe ingresar un numero entero", "Conocer la posición de un elemento especifico", JOptionPane.WARNING_MESSAGE);
                        if(elemento==null){
                            break;
                        }
                    }
                    if(elemento!=null){
                        if(lista.contains(Integer.parseInt(elemento))==false){
                            JOptionPane.showMessageDialog(null, "El elemento buscado no existe en la lista", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "El elemento "+Integer.parseInt(elemento)+" se encuentra en la posición: "+lista.indexOf(Integer.parseInt(elemento)), "Conocer la posición de un elemento especifico", JOptionPane.PLAIN_MESSAGE);
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No se puede buscar ningun elemento aún porque la lista está vacía", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No se puede buscar ningun elemento aún porque no existe ninguna lista creada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buscarElementoActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplicacionGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplicacionGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplicacionGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplicacionGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplicacionGrafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton añadirAlFinal;
    private javax.swing.JButton añadirEnPosicion;
    private javax.swing.JButton buscarElemento;
    private javax.swing.JButton buscarPorPosicion;
    private javax.swing.JButton crearLista;
    private javax.swing.JLabel descripcion1;
    private javax.swing.JLabel descripcion2;
    private javax.swing.JLabel descripcion3;
    private javax.swing.JLabel descripcion4;
    private javax.swing.JLabel descripcion5;
    private javax.swing.JLabel descripcion6;
    private javax.swing.JLabel descripcion7;
    private javax.swing.JLabel descripcion8;
    private javax.swing.JButton eliminarLista;
    private javax.swing.JButton modificar;
    private javax.swing.JButton remover;
    // End of variables declaration//GEN-END:variables
}
